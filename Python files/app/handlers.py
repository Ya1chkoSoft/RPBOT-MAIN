from email import message
import random
import pickle
import re
import sys
import os

from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—ë—Ä—Ç–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
from app.database.requests import get_or_create_user, get_balance, get_top, add_admin, get_user_by_username
from sqlalchemy.future import select
from app.database.models import User, Admins, History
from app.database.session import async_session
from datetime import datetime

import app.database.requests as rq
import app.keyboard as kb

from config import OWNER_ID

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

class GivePointsStates(StatesGroup):
    waiting_for_points = State()

player: list = []
router = Router()

test: str = "–¢–ï–°–¢ –ü–†–û–ô–î–ï–ù"

@router.message(CommandStart())
async def cmd_start(message: Message):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_or_create_user –≤–º–µ—Å—Ç–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ set_user
    await get_or_create_user(
        user_id=message.from_user.id,
        username=message.from_user.username or "",
        userfullname=message.from_user.full_name
    )
    await message.answer(
        """<b>–ü–†–ò–í–ï–¢–°–¢–í–£–Æ –í –ù–ê–®–ï–ú –†–ü –ë–û–¢–ï</b>
<i>–≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ 3.1</i>
–¥–∞–Ω–Ω—ã–π –±–æ—Ç –±—É–¥–µ—Ç –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –≤ —Ä–ø –∏ —Ç–¥:3
–Ω–∏–∂–µ –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–ª–æ–≥–∞—Ç—å—Å—è –º–µ–Ω—é, –∂–µ–ª–∞–µ–º –≤–∞–º —É–¥–∞—á–∏""",
        parse_mode='HTML',
        reply_markup=kb.main
    )

async def randomizers(rand):
    await message.reply(f'{rand}')

# –Ω–∏–∂–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
keywords = [
    "–∂–µ–Ω—â–∏–Ω–∞",
    "–º—É–∂—á–∏–Ω–∞",
    # ... –¥–æ–±–∞–≤—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ —Å–ª–æ–≤
]
pattern = re.compile(
    r"\b(" + "|".join(map(re.escape, keywords)) + r")\b",
    flags=re.IGNORECASE
)


#–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¶–ò–ò - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@router.message(F.text.startswith("—Ä–ø –Ω–∞–∑–Ω–∞—á–∏—Ç—å"))
async def handle_set_admin_level(message: Message):
    args = message.text.strip().split()  # —É–±—Ä–∞–ª maxsplit, —á—Ç–æ–±—ã —Ä–∞–∑–¥–µ–ª–∏—Ç—å –≤—Å–µ —á–∞—Å—Ç–∏
    
    if len(args) < 4:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: —Ä–ø –Ω–∞–∑–Ω–∞—á–∏—Ç—å <user_id –∏–ª–∏ @username> <—É—Ä–æ–≤–µ–Ω—å>")
        return

    target_str = args[2]  # —Ç—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –∞–π–¥–∏
    level_str = args[3]   # —á–µ—Ç–≤–µ—Ä—Ç—ã–π ‚Äî —É—Ä–æ–≤–µ–Ω—å

    if not level_str.isdigit():
        await message.reply("‚ùó –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    new_level = int(level_str)
    caller_id = message.from_user.id

    async with async_session() as session:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ
        if caller_id == OWNER_ID:
            caller_adminlevel = 10  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        else:
            caller_result = await session.execute(select(Admins).where(Admins.user_id == caller_id))
            caller = caller_result.scalar_one_or_none()
            if not caller or caller.adminlevel < 5:
                await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤.")
                return
            caller_adminlevel = caller.adminlevel

        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if target_str.isdigit():
            target_result = await session.execute(select(User).where(User.user_id == int(target_str)))
        else:
            username = target_str.lstrip("@")
            target_result = await session.execute(select(User).where(User.username == username))

        target_user = target_result.scalar_one_or_none()
        if not target_user:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω—Å—Ç–≤–∞ —Ü–µ–ª–µ–≤–æ–≥–æ
        target_admin_result = await session.execute(select(Admins).where(Admins.user_id == target_user.user_id))
        target_admin = target_admin_result.scalar_one_or_none()

        # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞—Ç—å —Ä–∞–≤–Ω–æ–≥–æ –∏–ª–∏ –≤—ã—à–µ—Å—Ç–æ—è—â–µ–≥–æ, –µ—Å–ª–∏ –Ω–µ OWNER
        if target_admin and caller_adminlevel <= target_admin.adminlevel and caller_id != OWNER_ID:
            await message.reply("üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£ –Ω–µ–≥–æ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ –∏–ª–∏ —Ä–∞–≤–Ω—ã–π –≤–∞—à–µ–º—É.")
            return

        # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ –∏–ª–∏ —Ä–∞–≤–Ω—ã–π —Å–µ–±–µ (–µ—Å–ª–∏ –Ω–µ OWNER)
        if new_level >= caller_adminlevel and caller_id != OWNER_ID:
            await message.reply("üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞ —É—Ä–æ–≤–Ω—è —Ä–∞–≤–Ω–æ–≥–æ –∏–ª–∏ –≤—ã—à–µ –≤–∞—à–µ–≥–æ.")
            return

        # ‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        target_user.adminlevel = new_level
        session.add(target_user)

        if not target_admin:
            session.add(Admins(user_id=target_user.user_id, adminlevel=new_level))
        else:
            target_admin.adminlevel = new_level
            session.add(target_admin)

        await session.commit()

        await message.reply(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.userfullname or '@' + (target_user.username or '–±–µ–∑_–Ω–∏–∫–∞')} "
            f"(ID: {target_user.user_id}) –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º —É—Ä–æ–≤–Ω—è {new_level}."
        )
        
@router.message(F.text == "—Ä–ø —è –æ–≤–Ω–µ—Ä")
async def make_myself_owner(message: Message):
    caller_id = message.from_user.id
    async with async_session() as session:
        session.add(Admins(user_id=caller_id, adminlevel=4))
        await session.commit()
        await message.reply(f"‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ OWNER (—É—Ä–æ–≤–µ–Ω—å 4). ID: {caller_id}")


#–°–ù–Ø–¢–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¶–ò–ò - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@router.message(F.text.startswith("—Ä–ø —Å–Ω—è—Ç—å"))
async def handle_remove_admin(message: Message):
    args = message.text.strip().split(maxsplit=2)

    if len(args) < 3:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: —Ä–ø —Å–Ω—è—Ç—å <user_id –∏–ª–∏ @username> <–ø—Ä–∏—á–∏–Ω–∞>")
        return

    target_str = args[2]
    reason = args[3] if len(args) > 3 else "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"
    remover_id = message.from_user.id
    OWNER_ID

    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–Ω–∏–º–∞–µ—Ç
        remover_result = await session.execute(select(Admins).where(Admins.user_id == remover_id))
        remover = remover_result.scalar_one_or_none()

        if not remover:
            await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è –∞–¥–º–∏–Ω–æ–≤.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–Ω–∏–º–∞–µ–º–æ–≥–æ –ø–æ ID –∏–ª–∏ username
        if target_str.isdigit():
            target_user_result = await session.execute(select(User).where(User.user_id == int(target_str)))
        else:
            username = target_str.lstrip("@")
            target_user_result = await session.execute(select(User).where(User.username == username))

        target_user = target_user_result.scalar_one_or_none()

        if not target_user:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ Admins
        target_admin_result = await session.execute(select(Admins).where(Admins.user_id == target_user.user_id))
        target_admin = target_admin_result.scalar_one_or_none()

        if not target_admin:
            await message.reply("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if remover.adminlevel <= target_admin.adminlevel and remover.user_id != OWNER_ID:
            await message.reply("üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£ –Ω–µ–≥–æ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ –∏–ª–∏ —Ä–∞–≤–Ω—ã–π –≤–∞—à–µ–º—É.")
            return

        # –°–Ω–∏–º–∞–µ–º: —É–¥–∞–ª—è–µ–º –∏–∑ Admins –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º adminlevel –≤ Users
        await session.delete(target_admin)
        target_user.adminlevel = 0
        session.add(target_user)

        await session.commit()

        await message.reply(
            f"‚úÖ {target_user.userfullname or '@' + (target_user.username or '–±–µ–∑_–Ω–∏–∫–∞')} —Å–Ω—è—Ç —Å –∞–¥–º–∏–Ω–∫–∏.\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )


#–ù–ê–ß–ò–°–õ–ï–ù–ò–ï –û–ß–ö–û–í - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@router.message(F.text.startswith("—Ä–ø –Ω–∞—á–∏—Å–ª–∏—Ç—å"))
async def handle_give_points_rp(message: Message):
    args = message.text.strip().split(maxsplit=3)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å, —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ—Ä–µ–º –æ—Ç—Ç—É–¥–∞
    if message.reply_to_message:
        target_user_telegram = message.reply_to_message.from_user
        target_str = None  # –ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø–æ user_id –∏–∑ reply_to_message
    else:
        if len(args) < 4:
            await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: —Ä–ø –Ω–∞—á–∏—Å–ª–∏—Ç—å <user_id –∏–ª–∏ @username> <–æ—á–∫–∏> <–ø—Ä–∏—á–∏–Ω–∞>")
            return
        target_str = args[2]
    
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º—ã, –ø–∞—Ä—Å–∏–º –æ—á–∫–∏ –∏ –ø—Ä–∏—á–∏–Ω—É
    if message.reply_to_message:
        # –í –æ—Ç–≤–µ—Ç–µ: args –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ ["—Ä–ø", "–Ω–∞—á–∏—Å–ª–∏—Ç—å", "<–æ—á–∫–∏> <–ø—Ä–∏—á–∏–Ω–∞>"]
        # –¢–æ–≥–¥–∞ –æ—á–∫–∏ –∏ –ø—Ä–∏—á–∏–Ω–∞ - –±–µ—Ä—ë–º –∏–∑ args[2], –¥–∞–ª—å—à–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º
        if len(args) < 3:
            await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: —Ä–ø –Ω–∞—á–∏—Å–ª–∏—Ç—å <–æ—á–∫–∏> <–ø—Ä–∏—á–∏–Ω–∞>")
            return
        points_reason = args[2].split(maxsplit=1)
        points_str = points_reason[0]
        reason = points_reason[1] if len(points_reason) > 1 else "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"
    else:
        points_str = args[3].split(maxsplit=1)[0]
        reason = args[3].split(maxsplit=1)[1] if len(args[3].split(maxsplit=1)) > 1 else "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–∫–æ–≤
    if not points_str.lstrip("-").isdigit():
        await message.reply("‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
        return

    points = int(points_str)
    admin_id = message.from_user.id

    async with async_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞
        admin_result = await session.execute(select(Admins).where(Admins.user_id == admin_id))
        admin = admin_result.scalar_one_or_none()
        if not admin or admin.adminlevel == 0:
            await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
        if message.reply_to_message:
            # –ü–æ–∏—Å–∫ –ø–æ user_id –∏–∑ telegram (reply_to_message.from_user.id)
            target_result = await session.execute(select(User).where(User.user_id == target_user_telegram.id))
        else:
            if target_str.isdigit():
                target_result = await session.execute(select(User).where(User.user_id == int(target_str)))
            else:
                username = target_str.lstrip("@")
                target_result = await session.execute(select(User).where(User.username == username))

        target_user = target_result.scalar_one_or_none()
        if not target_user:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
        if target_user.adminlevel >= admin.adminlevel:
            await message.reply("üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∏—Å–ª–∏—Ç—å –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ç–∞–∫–∏–º –∂–µ –∏–ª–∏ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º.")
            return

        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤
        target_user.points += points
        session.add(target_user)

        # –ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        session.add(History(
            admin_id=admin.user_id,
            target_id=target_user.user_id,
            points=points,
            reason=reason,
            timestamp=datetime.now()
        ))

        await session.commit()

        await message.reply(
            f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {points} –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "
            f"{target_user.userfullname or '@' + (target_user.username or '–±–µ–∑_–Ω–∏–∫–∞')} –∑–∞: {reason}"
        )

@router.message(Command("ping"))
async def test_ping(message: Message):
    await message.reply("pong")


#–û–°–ù–û–í–ù–´–ï –•–ï–ù–î–õ–ï–†–´ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@router.message(F.text)
async def randomizer1(message: Message):
    global rand, rand1_100
    text = message.text.strip().lower()
    rand = random.randint(1, 10)
    rand1_100 = random.randint(1, 100)

    match text:
        case '—Ñ–∞—Ä–º–∞':
            await message.reply('–ò–¥–∏ –Ω–∞ –ø–æ–ª–µ, —Ä–∞–±')
        case '1' | '—Ä–∞–Ω–¥' | '—Ä–∞–Ω–¥–æ–º' | 'rand' | 'random':
            await message.reply(f'{rand}')
        case '—Ç–µ—Å—Ç':
            await message.reply(test)
        case '—É—Ä–æ–Ω':
            await message.reply(f'{rand1_100}')
        case '–∫—É–±–∏–∫':
            await message.reply_dice()
        case '–ª—Å':
            await message.reply('<b>–õ–°</b>', parse_mode='HTML')
        case '–∞—Ö—É–µ—Ç—å':
            await message.reply('<b>–ó–≤—É–∫–∏ –±—Ä–∞–≤–ª —Å—Ç–∞—Ä—Å–∞</b>', parse_mode='HTML')
        case '—Ä–ø –ø—Ä–æ—Ñ–∏–ª—å':
            # 1) –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç
            user = await get_or_create_user(
                user_id=message.from_user.id,
                username=message.from_user.username or "",
                userfullname=message.from_user.full_name
            )
            # 2) –ë–µ—Ä—ë–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤
            points = await get_balance(message.from_user.id)
            # 3) –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –µ–≥–æ –¥–∞–Ω–Ω—ã–º–∏
            await message.reply(
                f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                f"‚Ä¢ ID: {user.user_id}\n"
                f"‚Ä¢ –ò–ú–Ø: {user.userfullname}\n"
                f"‚Ä¢ –†–ü –æ—á–∫–∏: {points}"
            )
            return
        case '—Ä–ø —Ç–æ–ø':
            top_users = await get_top(10)  # –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if not top_users:
                await message.answer("–¢–æ–ø —Ä–ø—à–µ—Ä–æ–≤ –ø—É—Å—Ç.")

            response_lines = ["üèÜ –¢–æ–ø –†–ü –∏–≥—Ä–æ–∫–æ–≤:"]
            for i, user in enumerate(top_users, start=1):
                username = user.username or f"ID {user.user_id}"
                response_lines.append(f"{i}. {username} ‚Äî {user.points} –±–∞–ª–ª–æ–≤")

            response_text = "\n".join(response_lines)
            await message.answer(response_text)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ pattern
    if match := pattern.search(text):
        key = match.group(1).lower()
        reply = random.choice(responses.get(key, [f"–ù–∞—à—ë–ª: {key}"]))
        await message.reply(reply)
        return

@router.callback_query(F.data == 'menubutton')
async def menu(callback: CallbackQuery):
    await callback.answer('—É—Å–ø–µ—à–Ω–æ')
    await callback.message.edit_text(
        '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é, –Ω–∏–∂–µ –∫–Ω–æ–ø–∫–∏ —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏',
        reply_markup=kb.menubuttons
    )

@router.callback_query(F.data == 'whatsrpbt')
async def defwhatsrpbutton(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text(
        '''<b>–†–ü –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç RolePlay</b>, 
<i>–Ω–∞ —Ä–ø –≤—ã –æ—Ç—ã–≥—Ä—ã–≤–∞–µ—Ç–µ –∑–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º, 
–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è</i>''',
        parse_mode='HTML',
        reply_markup=kb.main
    )

@router.callback_query(F.data == 'rpcommandbuttom')
async def defrpcommandsbutton(callback: CallbackQuery):
    await callback.answer('—É—Å–ø–µ—à–Ω–æ')
    await callback.message.edit_text(
        '''—Ä–ø –∫–æ–º–º–∞–Ω–¥—ã: 
<b>*–¥–µ–π—Å—Ç–≤–∏–µ*</b>(–∏–ª–∏ –∂–∏—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º)
<i>—à—ë–ø–æ—Ç</i>
(–º—ã—Å–ª–∏)
//–≤–Ω–µ —Ä–ø''',
        parse_mode='HTML',
        reply_markup=kb.main
    )

@router.callback_query(F.data == 'botcommandbt')
async def defrpcommandsbutton(callback: CallbackQuery):
    await callback.answer('—É—Å–ø–µ—à–Ω–æ')
    await callback.message.edit_text(
        '''—Ä–∞–Ω–¥(—Ä–∞–Ω–¥–æ–º,rand,random) - –∫–∏–¥–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 10
—É—Ä–æ–Ω - –∫–∏–¥–∞–µ—Ç –ø—Ä–æ–∫–∏–¥ –Ω–∞ —É—Ä–æ–Ω(1-100)
–∫—É–±–∏–∫ - –∫–∏–¥–∞–µ—Ç –∫—É–±–∏–∫
–∂–µ–Ω—â–∏–Ω–∞,–º—É–∂—á–∏–Ω–∞ - —É–≥–∞—Ä –∫–æ–º–º–∞–Ω–¥—ã
–†–ü –ø—Ä–æ—Ñ–∏–ª—å - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –º–µ–Ω–æ–º –º–∏—Ä–µ:
—Ä–ø —Ç–æ–ø - —Ç–æ –†–ü –∏–≥—Ä–æ–∫–æ–≤''',
        parse_mode='HTML',
        reply_markup=kb.main
    )


# –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
responses = {
    "–∂–µ–Ω—â–∏–Ω–∞": [
        '–Ø –ñ–ï–ù–©–ò–ù–ê',
        '–ê–ê–ê–ê–ê–ê –ñ–ï–ù–©–ò–ù–´ –ë–õ–Ø–¢–¨',
        '–ù–ï–ï–ï–ï–ï–ï–¢ –£–ë–ï–†–ò –≠–¢–û',
        '–≠–¢–û –ü–†–û–°–¢–û –ù–ï–í–û–ó–ú–û–ñ–ù–û!!!',
        '–°–ü–ê–°–ê–ô–°–Ø –ö–¢–û –ú–û–ñ–ï–¢',
        '–û—Ö –ê—Ö—ä –∂–µ–Ω—â–∏–Ω—ã —Ç–æ–ø—á–µ–≥  \n  *–ó–∞—Å—Ç—Ä–µ–ª–∏–ª —á–µ—Ä—Ç–∞*  —Ç—É–¥–∞ –µ–≥–æ–æ–æ–æ–æ',
        '–ñ–ï–ù–©–ò–ù–ê –í –ß–ê–¢–ï!!! \n–°–†–û–ß–ù–û –¢–†–ê–•–ê–¢–¨',
        '–ù—É –±—ã–≤–∞–µ—Ç',
    ],
    "–º—É–∂—á–∏–Ω–∞": [
        '–Ø –ú–£–ñ–ß–ò–ù–ê',
        '–ê–ê–ê–ê–ê–ê –ú–£–ñ–ò–ö–ò, –°–í–ï–ñ–ï–ï –ú–Ø–°–û!!!',
        '–∞ –≤—ã –∑–Ω–∞–ª–∏ —á—Ç–æ –≤ –∫–æ—Ä–µ–µ –≤—Å–µ –º—É–∂–∏–∫–∏ –ø–æ–≥–æ–ª–æ–≤–Ω–æ –ö–ü–û–ü –∏ –Ω–µ –Ω–∞—Ç—É—Ä–∞–ª—ã',
        '–≠–¢–û –ü–†–û–°–¢–û –ù–ï–í–û–ó–ú–û–ñ–ù–û!!!',
        '–ü–æ—à–ª–∏ –≤ —Ö–æ–µ—á–∫—É –∏ –æ—Ç–∂–∞—Ä—å –º–µ–Ω—è –ø–æ —Å–∞–º–æ–µ –Ω–∏—Ö–∞—á—É',
        '–û–Ω –ª—é–±–∏—Ç —Å–º–∞—á–Ω–æ –≤ –ø–æ–ø–∞—á–∫—É?',
        '–ú–£–ñ–ò–ö –í –ß–ê–¢–ï!!! \n–°–†–û–ß–ù–û –¢–†–ê–•–ê–¢–¨ –ò –ü–û–®–õ–ò –í –•–û–ô–ö–£',
        '–ù–∞–¥–æ –ø–æ–≤—ã—Å–∏—Ç—å',
        '–ë–´–°–¢–†–û –ó–û–í–ò –ï–ì–û –í –¢–ï–†–ö–£!\n –º—ã –±—É–¥–µ–º –Ω–∞ –ø–µ–Ω—Å–∏–ª–µ –ø—Ä—ã–≥–∞—Ç—å',
    ],
    # ... —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Å–µ—Ö keywords
}
