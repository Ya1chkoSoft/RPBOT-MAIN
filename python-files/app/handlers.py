from email import message
import random
import pickle
import re
import sys
import os
import html
import logging
import asyncio
logger = logging.getLogger(__name__)

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—ë—Ä—Ç–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
from app.database.requests import get_or_create_user, get_balance, get_top, add_admin, get_user_by_username
from sqlalchemy.future import select
from sqlalchemy import func
from app.database.models import User, Admins, History
from app.database.session import async_session
from datetime import datetime

import app.database.requests as rq
import app.keyboard as kb

from config import OWNER_ID

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env

OWNER_ID = int(os.getenv("OWNER_ID"))
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

class GivePointsStates(StatesGroup):
    waiting_for_points = State()

player: list = []
router = Router()

test: str = "–¢–ï–°–¢ –ü–†–û–ô–î–ï–ù"

@router.message(CommandStart())
async def cmd_start(message: Message):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_or_create_user –≤–º–µ—Å—Ç–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ set_user
    await get_or_create_user(
        user_id=message.from_user.id,
        username=message.from_user.username or "",
        userfullname=message.from_user.full_name
    )
    await message.answer(
        """<b>–ü–†–ò–í–ï–¢–°–¢–í–£–Æ –í –ù–ê–®–ï–ú –†–ü –ë–û–¢–ï</b>
<i>–≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ 3.2</i>
–¥–∞–Ω–Ω—ã–π –±–æ—Ç –±—É–¥–µ—Ç –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –≤ —Ä–ø –∏ —Ç–¥:3
–Ω–∏–∂–µ –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–ª–æ–≥–∞—Ç—å—Å—è –º–µ–Ω—é, –∂–µ–ª–∞–µ–º –≤–∞–º —É–¥–∞—á–∏""",
        parse_mode='HTML',
        reply_markup=kb.main
    )

async def randomizers(rand):
    await message.reply(f'{rand}')

# –Ω–∏–∂–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
keywords = [
    "–∂–µ–Ω—â–∏–Ω–∞",
    "–º—É–∂—á–∏–Ω–∞",
    # ... –¥–æ–±–∞–≤—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ —Å–ª–æ–≤
]
pattern = re.compile(
    r"\b(" + "|".join(map(re.escape, keywords)) + r")\b",
    flags=re.IGNORECASE
)

#–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¶–ò–ò - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@router.message(F.text.lower().startswith("—Ä–ø –Ω–∞–∑–Ω–∞—á–∏—Ç—å"))
async def handle_set_admin_level(message: Message):
    try:
        args = message.text.strip().split()
        if len(args) < 4:
            await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: —Ä–ø –Ω–∞–∑–Ω–∞—á–∏—Ç—å <user_id –∏–ª–∏ @username> <—É—Ä–æ–≤–µ–Ω—å>")
            return

        target_str = args[2]
        level_str = args[3]

        if not level_str.isdigit():
            await message.reply("‚ùó –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        new_level = int(level_str)
        caller_id = message.from_user.id

        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ
            if caller_id == OWNER_ID:
                caller_adminlevel = 5  # OWNER –º–æ–∂–µ—Ç –≤—Å—ë
            else:
                caller_result = await session.execute(select(Admins).where(Admins.user_id == caller_id))
                caller = caller_result.scalar_one_or_none()
                if not caller or caller.adminlevel < 5:
                    await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤.")
                    return
                caller_adminlevel = caller.adminlevel

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                target_user = None

            if target_str.isdigit():
                # –ü–æ–∏—Å–∫ –ø–æ ID –≤ –±–∞–∑–µ
                target_result = await session.execute(
                    select(User).where(User.user_id == int(target_str))
                )
                target_user = target_result.scalar_one_or_none()
            else:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ username –≤ –±–∞–∑–µ (—Ä–µ–≥–∏—Å—Ç—Ä –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º)
                username = target_str.lstrip("@")
                target_result = await session.execute(
                    select(User).where(func.lower(User.username) == username.lower())
                )
                target_user = target_result.scalar_one_or_none()

                # –ï—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç ‚Äî –ø—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å –∏–∑ Telegram –ø–æ @username
                if not target_user:
                    try:
                        tg_chat = await message.bot.get_chat(username)  # @username -> Chat/User
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏ –ø–æ user_id
                        by_id_result = await session.execute(
                            select(User).where(User.user_id == tg_chat.id)
                        )
                        target_user = by_id_result.scalar_one_or_none()

                        if not target_user:
                                # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å (—Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –ø—Ä–∏ –æ–±—â–µ–º commit –Ω–∏–∂–µ)
                            target_user = User(
                                user_id=tg_chat.id,
                                username=tg_chat.username,
                                userfullname=tg_chat.full_name,
                            )
                            session.add(target_user)
                            await session.flush()
                        else:
                            # –û–±–Ω–æ–≤–∏–º –Ω–∏–∫/–∏–º—è, –µ—Å–ª–∏ –ø–æ–º–µ–Ω—è–ª–∏—Å—å
                            target_user.username = tg_chat.username
                            target_user.userfullname = tg_chat.full_name
                            session.add(target_user)
                    except Exception:
                        target_user = None
            #–ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è
            target_admin_result = await session.execute(select(Admins).where(Admins.user_id == target_user.user_id))
            target_admin = target_admin_result.scalar_one_or_none()
            if target_admin and target_admin.adminlevel == new_level:
                await message.reply(f"‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç —É—Ä–æ–≤–µ–Ω—å {new_level}.")
                return

            if not target_user:
                await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω—Å—Ç–≤–∞ —Ü–µ–ª–µ–≤–æ–≥–æ
            target_admin_result = await session.execute(select(Admins).where(Admins.user_id == target_user.user_id))
            target_admin = target_admin_result.scalar_one_or_none()
            target_adminlevel = target_admin.adminlevel if target_admin else 0

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ —Å–≤–æ–µ–≥–æ (–µ—Å–ª–∏ –Ω–µ OWNER)
            if new_level >= caller_adminlevel and caller_id != OWNER_ID:
                await message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞ —É—Ä–æ–≤–Ω—è —Ä–∞–≤–Ω–æ–≥–æ –∏–ª–∏ –≤—ã—à–µ –≤–∞—à–µ–≥–æ.")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞—Ç—å —Ä–∞–≤–Ω–æ–≥–æ –∏–ª–∏ –≤—ã—à–µ—Å—Ç–æ—è—â–µ–≥–æ (–µ—Å–ª–∏ –Ω–µ OWNER)
            if target_admin and caller_adminlevel <= target_adminlevel and caller_id != OWNER_ID:
                await message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£ –Ω–µ–≥–æ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ –∏–ª–∏ —Ä–∞–≤–Ω—ã–π –≤–∞—à–µ–º—É.")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–ª—å–∑—è –ø–æ–≤—ã—Å–∏—Ç—å –≤—ã—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
            if new_level > 5:
                await message.reply("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚Äî 5.")
                return

            # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≤ –±–∞–∑–µ
            target_user.adminlevel = new_level
            session.add(target_user)

            if not target_admin:
                session.add(Admins(user_id=target_user.user_id, adminlevel=new_level))
            else:
                target_admin.adminlevel = new_level
                session.add(target_admin)

            await session.commit()

            # --- –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º ---
            full_display = target_user.userfullname or f"@{(target_user.username or '–±–µ–∑_–Ω–∏–∫–∞')}"
            reply_text = (
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_display} "
                f"(ID: {target_user.user_id}) –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º —É—Ä–æ–≤–Ω—è {new_level}."
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            await message.reply(reply_text)



#            # --- –õ–û–ì–ò –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π ---
#            b = reply_text.encode('utf-8')
#            logger.debug("OUTGOING_REPLY_REPR: %r", reply_text)         # Python repr (–≤–∏–¥–Ω–æ \n, \t –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã)
#            logger.debug("OUTGOING_REPLY_HEX: %s", b.hex())             # —á–∏—Å—Ç—ã–µ hex-–±–∞–π—Ç—ã
#            logger.debug("OUTGOING_REPLY_UNICODE_POINTS: %s", [hex(ord(c)) for c in reply_text])

    except ValueError as e:
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    except TypeError as e:
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    except Exception as e:
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# --- –û–í–ù–ï–† –ù–ê–ó–ù–ê–ß–ò–¢–¨ –ê–î–ú–ò–ù–ê --- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@router.message(F.text.lower().startswith("—Ä–ø –æ–≤–Ω–µ—Ä –Ω–∞–∑–Ω–∞—á–∏—Ç—å"))
async def owner_assign_admin(message: Message):
    args = message.text.strip().split()
    if len(args) < 4:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: —Ä–ø –æ–≤–Ω–µ—Ä –Ω–∞–∑–Ω–∞—á–∏—Ç—å <user_id –∏–ª–∏ @username> <—É—Ä–æ–≤–µ–Ω—å>")
        return

    target_str = args[2]
    level_str = args[3]

    if not level_str.isdigit():
        await message.reply("‚ùó –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    new_level = int(level_str)
    if new_level < 0 or new_level > 5:
        await message.reply("‚ùó –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 5.")
        return

    caller_id = message.from_user.id
    if caller_id != OWNER_ID:
        await message.reply("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if target_str.isdigit():
            target_result = await session.execute(select(User).where(User.user_id == int(target_str)))
        else:
            username = target_str.lstrip("@")
            target_result = await session.execute(select(User).where(User.username == username))

        target_user = target_result.scalar_one_or_none()
        if not target_user:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ù–∞–∑–Ω–∞—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
        target_user.adminlevel = new_level
        session.add(target_user)

        admin_result = await session.execute(select(Admins).where(Admins.user_id == target_user.user_id))
        admin = admin_result.scalar_one_or_none()
        if not admin:
            session.add(Admins(user_id=target_user.user_id, adminlevel=new_level))
        else:
            admin.adminlevel = new_level
            session.add(admin)

        await session.commit()
        await message.reply(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.userfullname or '@' + (target_user.username or '–±–µ–∑_–Ω–∏–∫–∞')} "
            f"(ID: {target_user.user_id}) –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º —É—Ä–æ–≤–Ω—è {new_level}."
        )

# --- –û–í–ù–ï–† –ù–ê–ß–ò–°–õ–ò–¢–¨ –û–ß–ö–ò --- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@router.message(F.text.lower().startswith("—Ä–ø –æ–≤–Ω–µ—Ä –Ω–∞—á–∏—Å–ª–∏—Ç—å"))
async def owner_add_points(message: Message):
    args = message.text.strip().split()

    # –§–æ—Ä–º–∞—Ç: —Ä–ø –æ–≤–Ω–µ—Ä –Ω–∞—á–∏—Å–ª–∏—Ç—å @username <–æ—á–∫–∏> <–ø—Ä–∏—á–∏–Ω–∞>
    if len(args) < 5:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: —Ä–ø –æ–≤–Ω–µ—Ä –Ω–∞—á–∏—Å–ª–∏—Ç—å @username <–æ—á–∫–∏> <–ø—Ä–∏—á–∏–Ω–∞>")
        return

    caller_id = message.from_user.id
    if caller_id != OWNER_ID:
        await message.reply("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    username = args[3].replace("@", "")  # @username
    points_str = args[4]


    if not points_str.lstrip("-").isdigit():
        await message.reply("‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
        return

    points = int(points_str)
    if points == 0:
        await message.reply("‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–ª—ë–º.")
        return

    reason = " ".join(args[5:]) or "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"

    async with async_session() as session:
        # –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        result = await session.execute(select(User).where(User.username == username))
        user = result.scalar_one_or_none()

        if not user:
            await message.reply(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return

        # –Ω–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏
        user.points += points
        session.add(user)

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history = History(
            admin_id=caller_id,
            target_id=user.user_id,
            points=points,
            reason=reason,
            timestamp=datetime.now()
        )
        session.add(history)

        await session.commit()

    await message.reply(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {points} –æ—á–∫–æ–≤.\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
    )


# --- –û–í–ù–ï–† –û–¢–ù–Ø–¢–¨ –û–ß–ö–ò --- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@router.message(F.text.lower().startswith("—Ä–ø –æ–≤–Ω–µ—Ä –æ—Ç–Ω—è—Ç—å"))
async def owner_remove_points(message: Message):
    args = message.text.strip().split()

    # –§–æ—Ä–º–∞—Ç: —Ä–ø –æ–≤–Ω–µ—Ä –æ—Ç–Ω—è—Ç—å @username <–æ—á–∫–∏> <–ø—Ä–∏—á–∏–Ω–∞>
    if len(args) < 5:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: —Ä–ø –æ–≤–Ω–µ—Ä –æ—Ç–Ω—è—Ç—å @username <–æ—á–∫–∏> <–ø—Ä–∏—á–∏–Ω–∞>")
        return

    caller_id = message.from_user.id
    if caller_id != OWNER_ID:
        await message.reply("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    username = args[3].replace("@", "")  # @username
    points_str = args[4]

    if not points_str.isdigit():
        await message.reply("‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
        return

    points = int(points_str)
    if points <= 0:
        await message.reply("‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return

    reason = " ".join(args[5:]) or "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"

    async with async_session() as session:
        # –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        result = await session.execute(select(User).where(User.username == username))
        user = result.scalar_one_or_none()

        if not user:
            await message.reply(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return

        # –≤—ã—á–∏—Ç–∞–µ–º –æ—á–∫–∏
        user.points -= points
        if user.points < 0:  # –∑–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            user.points = 0
        session.add(user)

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history = History(
            admin_id=caller_id,
            target_id=user.user_id,
            points=-points,  # –º–∏–Ω—É—Å–æ–≤—ã–µ –æ—á–∫–∏
            reason=reason,
            timestamp=datetime.now()
        )
        session.add(history)

        await session.commit()

    await message.reply(
        f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –æ—Ç–Ω—è—Ç–æ {points} –æ—á–∫–æ–≤.\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
    )

#–°–ù–Ø–¢–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¶–ò–ò - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@router.message(F.text.lower().startswith("—Ä–ø —Å–Ω—è—Ç—å"))
async def handle_remove_admin(message: Message):
    args = message.text.strip().split(maxsplit=2)

    if len(args) < 3:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: —Ä–ø —Å–Ω—è—Ç—å <user_id –∏–ª–∏ @username> <–ø—Ä–∏—á–∏–Ω–∞>")
        return

    target_str = args[2]
    reason = (message.text.strip().replace("—Ä–ø —Å–Ω—è—Ç—å " + target_str, "").strip()) or "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"
    remover_id = message.from_user.id
    OWNER_ID

    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–Ω–∏–º–∞–µ—Ç
        remover_result = await session.execute(select(Admins).where(Admins.user_id == remover_id))
        remover = remover_result.scalar_one_or_none()

        if not remover:
            await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è –∞–¥–º–∏–Ω–æ–≤.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–Ω–∏–º–∞–µ–º–æ–≥–æ –ø–æ ID –∏–ª–∏ username
        if target_str.isdigit():
            target_user_result = await session.execute(select(User).where(User.user_id == int(target_str)))
        else:
            username = target_str.lstrip("@")
            target_user_result = await session.execute(select(User).where(User.username == username))

        target_user = target_user_result.scalar_one_or_none()

        if not target_user:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ Admins
        target_admin_result = await session.execute(select(Admins).where(Admins.user_id == target_user.user_id))
        target_admin = target_admin_result.scalar_one_or_none()

        if not target_admin:
            await message.reply("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if remover.adminlevel <= target_admin.adminlevel and remover.user_id != OWNER_ID:
            await message.reply("üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£ –Ω–µ–≥–æ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ –∏–ª–∏ —Ä–∞–≤–Ω—ã–π –≤–∞—à–µ–º—É.")
            return

        # –°–Ω–∏–º–∞–µ–º: —É–¥–∞–ª—è–µ–º –∏–∑ Admins –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º adminlevel –≤ Users
        await session.delete(target_admin)
        target_user.adminlevel = 0
        session.add(target_user)

        await session.commit()

        await message.reply(
            f"‚úÖ {target_user.userfullname or '@' + (target_user.username or '–±–µ–∑_–Ω–∏–∫–∞')} —Å–Ω—è—Ç —Å –∞–¥–º–∏–Ω–∫–∏.\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )


#–°–ü–ò–°–û–ö –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@router.message(F.text.lower().startswith("—Ä–ø –∞–¥–º–∏–Ω—ã"))
async def list_admins(message: Message):
    async with async_session() as session:
        result = await session.execute(select(Admins))
        admins = result.scalars().all()

    if not admins:
        await message.reply("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.")
        return

    admin_text = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
    for admin in admins:
        user_result = await session.execute(select(User).where(User.user_id == admin.user_id))
        user = user_result.scalar_one_or_none()
        if user:
            admin_text += f"‚Ä¢ {user.userfullname or '@' + (user.username or '–±–µ–∑_–Ω–∏–∫–∞')} (ID: {user.user_id}) ‚Äî —É—Ä–æ–≤–µ–Ω—å {admin.adminlevel}\n"
        else:
            admin_text += f"‚Ä¢ ID: {admin.user_id} ‚Äî —É—Ä–æ–≤–µ–Ω—å {admin.adminlevel} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –±–∞–∑–µ)\n"

    await message.reply(admin_text)

#–ù–ê–ß–ò–°–õ–ï–ù–ò–ï –û–ß–ö–û–í - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@router.message(F.text.lower().startswith("—Ä–ø –Ω–∞—á–∏—Å–ª–∏—Ç—å"))
async def handle_give_points_rp(message: Message):
    args = message.text.strip().split(maxsplit=3)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å, —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ—Ä–µ–º –æ—Ç—Ç—É–¥–∞
    if message.reply_to_message:
        target_user_telegram = message.reply_to_message.from_user
        target_str = None  # –ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø–æ user_id –∏–∑ reply_to_message
    else:
        if len(args) < 4:
            await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: —Ä–ø –Ω–∞—á–∏—Å–ª–∏—Ç—å <user_id –∏–ª–∏ @username> <–æ—á–∫–∏> <–ø—Ä–∏—á–∏–Ω–∞>")
            return
        target_str = args[2]
    
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º—ã, –ø–∞—Ä—Å–∏–º –æ—á–∫–∏ –∏ –ø—Ä–∏—á–∏–Ω—É
    if message.reply_to_message:
        # –í –æ—Ç–≤–µ—Ç–µ: args –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ ["—Ä–ø", "–Ω–∞—á–∏—Å–ª–∏—Ç—å", "<–æ—á–∫–∏> <–ø—Ä–∏—á–∏–Ω–∞>"]
        # –¢–æ–≥–¥–∞ –æ—á–∫–∏ –∏ –ø—Ä–∏—á–∏–Ω–∞ - –±–µ—Ä—ë–º –∏–∑ args[2], –¥–∞–ª—å—à–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º
        if len(args) < 3:
            await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: —Ä–ø –Ω–∞—á–∏—Å–ª–∏—Ç—å <–æ—á–∫–∏> <–ø—Ä–∏—á–∏–Ω–∞>")
            return
        points_reason = args[2].split(maxsplit=1)
        points_str = points_reason[0]
        reason = points_reason[1] if len(points_reason) > 1 else "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"
    else:
        points_str = args[3].split(maxsplit=1)[0]
        reason = args[3].split(maxsplit=1)[1] if len(args[3].split(maxsplit=1)) > 1 else "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–∫–æ–≤
    if not points_str.lstrip("-").isdigit():
        await message.reply("‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
        return

    points = int(points_str)
    admin_id = message.from_user.id

    async with async_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞
        admin_result = await session.execute(select(Admins).where(Admins.user_id == admin_id))
        admin = admin_result.scalar_one_or_none()
        if not admin or admin.adminlevel == 0:
            await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
        if message.reply_to_message:
            # –ü–æ–∏—Å–∫ –ø–æ user_id –∏–∑ telegram (reply_to_message.from_user.id)
            target_result = await session.execute(select(User).where(User.user_id == target_user_telegram.id))
        else:
            if target_str.isdigit():
                target_result = await session.execute(select(User).where(User.user_id == int(target_str)))
            else:
                username = target_str.lstrip("@")
                target_result = await session.execute(select(User).where(User.username == username))

        target_user = target_result.scalar_one_or_none()
        if not target_user:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
        if target_user.adminlevel >= admin.adminlevel:
            await message.reply("üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∏—Å–ª–∏—Ç—å –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ç–∞–∫–∏–º –∂–µ –∏–ª–∏ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º.")
            return

        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤
        target_user.points += points
        session.add(target_user)

        # –ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        session.add(History(
            admin_id=admin.user_id,
            target_id=target_user.user_id,
            points=points,
            reason=reason,
            timestamp=datetime.now()
        ))

        await session.commit()

        await message.reply(
            f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {points} –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "
            f"{target_user.userfullname or '@' + (target_user.username or '–±–µ–∑_–Ω–∏–∫–∞')} –∑–∞: {reason}"
        )
#–ø–µ—Ä–µ–¥–∞—á–∞ –æ—á–∫–æ–≤  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@router.message(F.text.lower().startswith("—Ä–ø –ø–µ—Ä–µ–¥–∞—Ç—å"))
async def transfer_points(message: Message):
    args = message.text.strip().split()
    if len(args) < 3:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: —Ä–ø –ø–µ—Ä–µ–¥–∞—Ç—å <—Å—É–º–º–∞> <@—é–∑–µ—Ä –∏–ª–∏ ID>")
        return

    amount_str = args[2]
    if not amount_str.isdigit():
        await message.reply("‚ùó –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    amount = int(amount_str)
    if amount <= 0:
        await message.reply("‚ùó –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return

    sender_id = message.from_user.id
    receiver_id = None

    # –ü–æ–ª—É—á–∞—Ç–µ–ª—å –∏–∑ —Ä–µ–ø–ª–∞—è
    if message.reply_to_message:
        receiver_id = message.reply_to_message.from_user.id
    elif len(args) >= 4:
        receiver_arg = args[3]

        # –ï—Å–ª–∏ @username
        if receiver_arg.startswith("@"):
            username = receiver_arg[1:]
            async with async_session() as session:
                user_result = await session.execute(
                    select(User).where(User.username == username)
                )
                receiver = user_result.scalar_one_or_none()
                if receiver:
                    receiver_id = receiver.user_id
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ ID
            if receiver_arg.isdigit():
                receiver_id = int(receiver_arg)

    if not receiver_id:
        await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (—Ä–µ–ø–ª–∞–π –∏–ª–∏ @username –∏–ª–∏ ID).")
        return

    async with async_session() as session:
        # –∏—â–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        sender_result = await session.execute(select(User).where(User.user_id == sender_id))
        sender = sender_result.scalar_one_or_none()

        if not sender:
            await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return

        if sender.points < amount:
            await message.reply("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
            return

        # –∏—â–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        receiver_result = await session.execute(select(User).where(User.user_id == receiver_id))
        receiver = receiver_result.scalar_one_or_none()

        if not receiver:
            await message.reply("‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            return

        if receiver.user_id == sender.user_id:
            await message.reply("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –æ—á–∫–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
            return

        # –ø–µ—Ä–µ–≤–æ–¥
        sender.points -= amount
        receiver.points += amount

        session.add_all([sender, receiver])
        await session.commit()

        await message.reply(
            f"üí∏ {amount} –æ—á–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ!\n"
            f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender.username or sender.user_id}\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {receiver.username or receiver.user_id}\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {sender.points}"
        )

#–ö–∞–∑–∏–Ω–æ –Ω–∞ –æ—á–∫–∞—Ö - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SLOT_SYMBOLS = ["üçí", "üçã", "ü¶∑", "‚≠ê", "üëºüèø"]  # –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å

@router.message(F.text.lower().startswith("—Ä–ø –∫–∞–∑–∏–Ω–æ"))
async def casino(message: Message):
    args = message.text.strip().split()
    if len(args) < 3:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: —Ä–ø –∫–∞–∑–∏–Ω–æ <—Å—Ç–∞–≤–∫–∞>")
        return

    bet_str = args[2]
    if not bet_str.isdigit():
        await message.reply("‚ùó –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return

    bet = int(bet_str)
    if bet <= 0:
        await message.reply("‚ùó –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return

    user_id = message.from_user.id

    async with async_session() as session:
        user_result = await session.execute(select(User).where(User.user_id == user_id))
        user = user_result.scalar_one_or_none()

        if not user:
            await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            return

        if user.points < bet:
            await message.reply("üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.")
            return

        # —Å–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
        user.points -= bet

        # –∫—Ä—É—Ç–∏–º —Å–ª–æ—Ç—ã
        slot1 = random.choice(SLOT_SYMBOLS)
        slot2 = random.choice(SLOT_SYMBOLS)
        slot3 = random.choice(SLOT_SYMBOLS)

        # –∞–Ω–∏–º–∞—Ü–∏—è "–≤—Ä–∞—â–µ–Ω–∏—è"
        msg = await message.reply("üé∞ –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã...")
        await asyncio.sleep(1)
        await msg.edit_text(f"üé∞ | {slot1} | ‚ùì | ‚ùì |")
        await asyncio.sleep(1)
        await msg.edit_text(f"üé∞ | {slot1} | {slot2} | ‚ùì |")
        await asyncio.sleep(1)
        await msg.edit_text(f"üé∞ | {slot1} | {slot2} | {slot3} |")

        # —Å–ª—É—á–∞–π–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–∂–µ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ)
        multiplier = round(random.uniform(2.0, 5.3), 2)

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        if slot1 == slot2 == slot3:
            # –¥–∂–µ–∫–ø–æ—Ç
            winnings = int(bet * multiplier)
            user.points += winnings
            result_text = (
                f"‚ú® –î–∂–µ–∫–ø–æ—Ç! –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞!\n"
                f"üíé –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {multiplier}x\n"
                f"üèÜ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} –æ—á–∫–æ–≤!"
            )
        # –¥–≤–µ –ø–∞—Ä—ã
        elif slot1 == slot2 or slot2 == slot3 or slot1 == slot3:
            winnings = int(bet * (multiplier / 2.5))
            user.points += winnings
            result_text = (
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –î–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞!\n"
                f"üíé –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {multiplier/2}x\n"
                f"üèÜ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} –æ—á–∫–æ–≤!"
            )
        else:
            result_text = (
                f"‚ùå –£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.\n"
                f"üí∞ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet} –æ—á–∫–æ–≤\n"
                f"üî¢ –ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥: {multiplier}x"
            )

        session.add(user)
        await session.commit()

        await message.reply(
            f"{result_text}\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.points} –æ—á–∫–æ–≤.\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–µ—Ä–µ–∑ '—Ä–ø –ø—Ä–æ—Ñ–∏–ª—å'."
        )
#–§—É–Ω–∫—Ü–∏–∏ —Å–ª–æ—Ç –º–∞—à–∏–Ω—ã - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
def generate_symbols(symbols, base_mult=2, mult_step=1, base_weight=30, weight_step=-5):
    """
    symbols: —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ (["üåö", "üçã", ...])
    base_mult: –º–Ω–æ–∂–∏—Ç–µ–ª—å –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    mult_step: –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ä–∞—Å—Ç—ë—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–∏–º–≤–æ–ª—É
    base_weight: –≤–µ—Å (—á–∞—Å—Ç–æ—Ç–∞ –≤—ã–ø–∞–¥–µ–Ω–∏—è) –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    weight_step: –Ω–∞—Å–∫–æ–ª—å–∫–æ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –≤–µ—Å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–∏–º–≤–æ–ª—É
    """
    multipliers = {}
    weights = []

    for i, sym in enumerate(symbols):
        # –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–∞—Å—Ç—ë—Ç
        multipliers[sym] = base_mult + mult_step * i
        # –≤–µ—Å —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è
        weight = max(1, base_weight + weight_step * i)  # —á—Ç–æ–±—ã –Ω–µ —É–π—Ç–∏ –≤ 0 –∏–ª–∏ –º–∏–Ω—É—Å
        weights.append(weight)

    return multipliers, weights


#--------------- –ù–ê–°–¢–†–û–ô–ö–ê ----------------
SLOT_SYMBOLS = ["üåö", "üçã", "‚≠ê", "‚ò¢", "üé∏", "üëºüèø","üö∫","üöπ"]

# –≥–µ–Ω–µ—Ä–∏–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –∏ –≤–µ—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
SYMBOL_MULTIPLIERS, SYMBOL_WEIGHTS = generate_symbols(
    SLOT_SYMBOLS,
    base_mult=2,   # –ø–µ—Ä–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
    mult_step=1,   # —à–∞–≥ —Ä–æ—Å—Ç–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è
    base_weight=30, # –≤–µ—Å —Å–∞–º–æ–≥–æ —á–∞—Å—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    weight_step=-5 # —à–∞–≥ —É–º–µ–Ω—å—à–µ–Ω–∏—è –≤–µ—Å–∞
)
def spin_slots():
    return [[random.choice(SLOT_SYMBOLS) for _ in range(3)] for _ in range(3)]

def format_slots(slots):
    return "\n".join(" | ".join(row) for row in slots)

def get_winning_lines(slots):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ª–∏–Ω–∏–π [(—Å–∏–º–≤–æ–ª, –æ–ø–∏—Å–∞–Ω–∏–µ, –º–Ω–æ–∂–∏—Ç–µ–ª—å)]."""
    winning_lines = []
    n = 3  # —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è

    # --- –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ ---
    for i in range(n):
        if slots[i][0] == slots[i][1] == slots[i][2]:
            winning_lines.append((slots[i][0], f"–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å {i+1}", 1.0))

    # --- –í–µ—Ä—Ç–∏–∫–∞–ª–∏ ---
    for j in range(n):
        if slots[0][j] == slots[1][j] == slots[2][j]:
            winning_lines.append((slots[0][j], f"–í–µ—Ä—Ç–∏–∫–∞–ª—å {j+1}", 1.0))

    # --- –î–∏–∞–≥–æ–Ω–∞–ª–∏ ---
    if slots[0][0] == slots[1][1] == slots[2][2]:
        winning_lines.append((slots[0][0], "–ì–ª–∞–≤–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å", 1.0))
    if slots[0][2] == slots[1][1] == slots[2][0]:
        winning_lines.append((slots[0][2], "–ü–æ–±–æ—á–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å", 1.0))

    return winning_lines

#–°–õ–û–¢ –ú–ê–®–ò–ù–ê 3 –Ω–∞ 3  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@router.message(F.text.lower().startswith("—Ä–ø —Å–ª–æ—Ç"))
async def slot_machine(message: Message):
    args = message.text.strip().split()
    if len(args) < 3:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: —Ä–ø –∫–∞–∑–∏–Ω–æ <—Å—Ç–∞–≤–∫–∞>")
        return

    bet_str = args[2]
    if not bet_str.isdigit():
        await message.reply("‚ùó –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    bet = int(bet_str)
    if bet <= 0:
        await message.reply("‚ùó –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return

    user_id = message.from_user.id
    async with async_session() as session:
        user_result = await session.execute(select(User).where(User.user_id == user_id))
        user = user_result.scalar_one_or_none()

        if not user:
            await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            return
        if user.points < bet:
            await message.reply("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤, –≤—ã –±–µ–¥–Ω–æ—Å—Ç—å‚ù§")
            return

        # —Å–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
        user.points -= bet

        # —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        msg = await message.reply("üé∞ –ó–∞–ø—É—Å–∫ —Å–ª–æ—Ç–æ–≤...")

        #--------------- –ê–ù–ò–ú–ê–¶–ò–Ø (1 –≤—Ä–∞—â–µ–Ω–∏–µ) ---------------
        slots = None
        for _ in range(2):  # –±—ã–ª–æ 5
            slots = spin_slots()
            field = format_slots(slots)
            await msg.edit_text(f"üé∞ –ö—Ä—É—Ç–∏—Ç—Å—è...\n{field}")
            await asyncio.sleep(0.8)  # –±—ã–ª–æ 0.4

        # –≤—ã–±–∏—Ä–∞–µ–º –æ–±—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
        global_multiplier = round(random.uniform(0.5, 1.5), 1)

        # –∏—â–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏
        winning_lines = get_winning_lines(slots)
        total_winnings = 0
        lines_text = ""

        if winning_lines:
            for symbol, line, line_mult in winning_lines:
                symbol_multiplier = SYMBOL_MULTIPLIERS.get(symbol, 1)

                # –æ–±—ã—á–Ω—ã–µ –ª–∏–Ω–∏–∏ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏, –≤–µ—Ä—Ç–∏–∫–∞–ª–∏, –¥–∏–∞–≥–æ–Ω–∞–ª–∏)
                if line_mult == 1.0:
                    line_winnings = int(bet * symbol_multiplier * global_multiplier)
                    lines_text += f"{line}: {symbol} √ó{symbol_multiplier} √ó{global_multiplier} = {line_winnings}\n"

                total_winnings += line_winnings  # —Å—É–º–º–∏—Ä—É–µ–º

            user.points += total_winnings  # –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –∫ –±–∞–ª–∞–Ω—Å—É

            result = f"üéâ –í—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏:\n{lines_text}\nüíµ –û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à: {total_winnings} –æ—á–∫–æ–≤!"
        else:
            result = f"‚ùå –£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} –æ—á–∫–æ–≤.\nüí∏ –í—Å—ë —É—à–ª–æ –∞–¥–º–∏–Ω—É üòâ"

        session.add(user)
        await session.commit()

        await msg.edit_text(
            f"üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{format_slots(slots)}\n\n{result}\n\nüí∞ –ë–∞–ª–∞–Ω—Å: {user.points} –æ—á–∫–æ–≤."
        )
#–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç - - - - - - - - - - - - -
@router.message(Command("ping"))
async def test_ping(message: Message):
    await message.reply("pong")


#–û–°–ù–û–í–ù–´–ï –•–ï–ù–î–õ–ï–†–´ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@router.message(F.text)
async def randomizer1(message: Message):
    global rand, rand1_100
    text = message.text.strip().lower()
    rand = random.randint(1, 10)
    rand1_100 = random.randint(1, 100)

    match text:
        case '—Ñ–∞—Ä–º–∞':
            await message.reply('–ò–¥–∏ –Ω–∞ –ø–æ–ª–µ, —Ä–∞–±')
        case '1' | '—Ä–∞–Ω–¥' | '—Ä–∞–Ω–¥–æ–º' | 'rand' | 'random':
            await message.reply(f'{rand}')
        case '—Ç–µ—Å—Ç':
            await message.reply(test)
        case '—É—Ä–æ–Ω':
            await message.reply(f'{rand1_100}')
        case '–∫—É–±–∏–∫':
            await message.reply_dice()
        case '–ª—Å':
            await message.reply('<b>–õ–°</b>', parse_mode='HTML')
        case '–∞—Ö—É–µ—Ç—å':
            await message.reply('<b>–ó–≤—É–∫–∏ –±—Ä–∞–≤–ª —Å—Ç–∞—Ä—Å–∞</b>', parse_mode='HTML')
        case '—Ä–ø –ø—Ä–æ—Ñ–∏–ª—å':
            # 1) –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç
            user = await get_or_create_user(
                user_id=message.from_user.id,
                username=message.from_user.username or "",
                userfullname=message.from_user.full_name
            )
            # 2) –ë–µ—Ä—ë–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤
            points = await get_balance(message.from_user.id)
            # 3) –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –µ–≥–æ –¥–∞–Ω–Ω—ã–º–∏
            await message.reply(
                f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                f"‚Ä¢ ID: {user.user_id}\n"
                f"‚Ä¢ –ò–ú–Ø: {user.userfullname}\n"
                f"‚Ä¢ –†–ü –æ—á–∫–∏: {points}"
            )
            return
        case '—Ä–ø —Ç–æ–ø':
            top_users = await get_top(10)  # –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if not top_users:
                await message.answer("–¢–æ–ø —Ä–ø—à–µ—Ä–æ–≤ –ø—É—Å—Ç.")

            response_lines = ["üèÜ –¢–æ–ø –†–ü –∏–≥—Ä–æ–∫–æ–≤:"]
            for i, user in enumerate(top_users, start=1):
                username = user.username or f"ID {user.user_id}"
                response_lines.append(f"{i}. {username} ‚Äî {user.points} –±–∞–ª–ª–æ–≤")

            response_text = "\n".join(response_lines)
            await message.answer(response_text)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ pattern
    if match := pattern.search(text):
        key = match.group(1).lower()
        reply = random.choice(responses.get(key, [f"–ù–∞—à—ë–ª: {key}"]))
        await message.reply(reply)
        return

@router.callback_query(F.data == 'menubutton')
async def menu(callback: CallbackQuery):
    await callback.answer('—É—Å–ø–µ—à–Ω–æ')
    await callback.message.edit_text(
        '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é, –Ω–∏–∂–µ –∫–Ω–æ–ø–∫–∏ —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏',
        reply_markup=kb.menubuttons
    )

@router.callback_query(F.data == 'whatsrpbt')
async def defwhatsrpbutton(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text(
        '''<b>–†–ü –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç RolePlay</b>, 
<i>–Ω–∞ —Ä–ø –≤—ã –æ—Ç—ã–≥—Ä—ã–≤–∞–µ—Ç–µ –∑–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º, 
–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è</i>''',
        parse_mode='HTML',
        reply_markup=kb.main
    )

@router.callback_query(F.data == 'rpcommandbuttom')
async def defrpcommandsbutton(callback: CallbackQuery):
    await callback.answer('—É—Å–ø–µ—à–Ω–æ')
    await callback.message.edit_text(
        '''—Ä–ø –∫–æ–º–º–∞–Ω–¥—ã: 
<b>*–¥–µ–π—Å—Ç–≤–∏–µ*</b>(–∏–ª–∏ –∂–∏—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º)
<i>—à—ë–ø–æ—Ç</i>
(–º—ã—Å–ª–∏)
//–≤–Ω–µ —Ä–ø''',
        parse_mode='HTML',
        reply_markup=kb.main
    )

@router.callback_query(F.data == 'botcommandbt')
async def defrpcommandsbutton(callback: CallbackQuery):
    await callback.answer('—É—Å–ø–µ—à–Ω–æ')
    await callback.message.edit_text(
        '''—Ä–∞–Ω–¥(—Ä–∞–Ω–¥–æ–º,rand,random) - –∫–∏–¥–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 10
—É—Ä–æ–Ω - –∫–∏–¥–∞–µ—Ç –ø—Ä–æ–∫–∏–¥ –Ω–∞ —É—Ä–æ–Ω(1-100)
–∫—É–±–∏–∫ - –∫–∏–¥–∞–µ—Ç –∫—É–±–∏–∫
–∂–µ–Ω—â–∏–Ω–∞,–º—É–∂—á–∏–Ω–∞ - —É–≥–∞—Ä –∫–æ–º–º–∞–Ω–¥—ã
–†–ü –ø—Ä–æ—Ñ–∏–ª—å - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –º–µ–Ω–æ–º –º–∏—Ä–µ:
—Ä–ø —Ç–æ–ø - —Ç–æ –†–ü –∏–≥—Ä–æ–∫–æ–≤
—Ä–ø –∞–¥–º–∏–Ω—ã - —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤''',
        parse_mode='HTML',
        reply_markup=kb.main
    )


# –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
responses = {
    "–∂–µ–Ω—â–∏–Ω–∞": [
        '—ã—ã—ã—ã—ã—ã—ã—ã—ã',
        '–ê–ê–ê–ê–ê–ê –ñ–ï–ù–©–ò–ù–´ –ë–õ–Ø–¢–¨',
        '–ù–ï–ï–ï–ï–ï–ï–¢ –£–ë–ï–†–ò –≠–¢–û',
        '–≠–¢–û –ü–†–û–°–¢–û –ù–ï–í–û–ó–ú–û–ñ–ù–û!!!',
        '–°–ü–ê–°–ê–ô–°–Ø –ö–¢–û –ú–û–ñ–ï–¢',
        '–û—Ö –ê—Ö—ä –∂–µ–Ω—â–∏–Ω—ã —Ç–æ–ø—á–µ–≥  \n  *–ó–∞—Å—Ç—Ä–µ–ª–∏–ª —á–µ—Ä—Ç–∞*  —Ç—É–¥–∞ –µ–≥–æ–æ–æ–æ–æ',
        '–ñ–ï–ù–©–ò–ù–ê –í –ß–ê–¢–ï!!! \n–°–†–û–ß–ù–û –°–ü–ê–°–ê–ô–°–Ø',
        '–ù—É –±—ã–≤–∞–µ—Ç',
    ],
    "–º—É–∂—á–∏–Ω–∞": [
        '–Ø –ú–£–ñ–ß–ò–ù–ê',
        '–ê–ê–ê–ê–ê–ê –ú–£–ñ–ò–ö–ò, –°–í–ï–ñ–ï–ï –ú–Ø–°–û!!!',
        '–∞ –≤—ã –∑–Ω–∞–ª–∏ —á—Ç–æ –≤ –∫–æ—Ä–µ–µ –≤—Å–µ –º—É–∂–∏–∫–∏ –ø–æ–≥–æ–ª–æ–≤–Ω–æ –ö–ü–û–ü –∏ –Ω–µ –Ω–∞—Ç—É—Ä–∞–ª—ã',
        '–≠–¢–û –ü–†–û–°–¢–û –ù–ï–í–û–ó–ú–û–ñ–ù–û!!!',
        '–ü–æ—à–ª–∏ –≤ —Ö–æ–µ—á–∫—É –∏ –æ—Ç–∂–∞—Ä—å –º–µ–Ω—è –ø–æ —Å–∞–º–æ–µ –Ω–∏—Ö–∞—á—É',
        '–û–Ω –ª—é–±–∏—Ç —Å–º–∞—á–Ω–æ –≤ –ø–æ–ø–∞—á–∫—É?',
        '–ú–£–ñ–ò–ö –í –ß–ê–¢–ï!!! \n–°–†–û–ß–ù–û –¢–†–ê–•–ê–¢–¨ –ò –ü–û–®–õ–ò –í –•–û–ô–ö–£',
        '–ù–∞–¥–æ –ø–æ–≤—ã—Å–∏—Ç—å',
        '–ë–´–°–¢–†–û –ó–û–í–ò –ï–ì–û –í –¢–ï–†–ö–£!\n –º—ã –±—É–¥–µ–º –Ω–∞ –ø–µ–Ω—Å–∏–ª–µ –ø—Ä—ã–≥–∞—Ç—å',
        "—ã—ã—ã—ã—ã—ã—ã—ã—ã—ã",
    ],
    # ... —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Å–µ—Ö keywords
}
